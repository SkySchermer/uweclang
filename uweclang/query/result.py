"""UWEC Language Tools result module


"""
# Python 3 forward compatability imports.
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

from uweclang.tagged.tag import tagged_to_plain
from collections import Counter, defaultdict

# Setup logger.
import logging
logging.getLogger(__name__).addHandler(logging.NullHandler())

class QueryResult(object):
    """Represents a single query match.
    """
    def __init__(self, match_text, span, source_id=None):
        """Creates a query match from a corpus file id, a span of the matching
        text, and a copy of the matching text.

        Arguments:
            source_id (int): The id of the source file in the corpus.
            source_span (TBD): The span of the match in the source file.
            match_text (str): The text matching the query.
        """
        self._span = span
        self._match_text = match_text
        self._source_id = source_id

    @property
    def match_text(self):
        """Getter for match_text property. """
        return self._match_text

    @property
    def span(self):
        """Getter for span property. """
        return self._span

    @property
    def source_id(self):
        """Getter for source_id property. """
        return self._source_id

    def __str__(self):
        return ' '.join(map(str, self.match_text))

    def __repr__(self):
        if self._source_id is not None:
            return "QueryResult({}, {}, {})".format(
                self._match_text,
                self._span,
                self._source_id)
        else:
            return "QueryResult({}, {})".format(
                self._match_text,
                self._span)


def compile_statistics(result_set, corpus, categories=None):
    """Return a dictionary of statistics generated by counting results into
    categories.

    Arguments:
        result_set ([Results]): The results to generate statistics for.
        corpus (Corpus): The corpus of the data corresponding to the result
            set.
        categories ([str]): The meta data categories to compile statistics for.
    """
    stats = defaultdict(Counter)
    total = 0
    for result in result_set:
        total += 1
        if categories:
            for category in categories:
                meta = corpus.get_file_metadata(result.source_id)
                stats[category][meta.get(category, 'None')] += 1

    res = {k:dict(v) for k, v in stats.iteritems()}
    res['total'] = total
    return res


class QueryParseError(Exception):
    def __init__(self, message, text=None, line=None, column=None):
        super(QueryParseError, self).__init__()
        self._message = message
        self._text = text
        self._line = line
        self._column = column

    def __str__(self):
        res = 'Query parse error {}{}{}'.format(
            'at {}:{}: '.format(self.line, self.column),
            "'{}' ".format(self.text),
            self.message,
        )
        return res

    @property
    def text(self):
        return self._text

    @property
    def message(self):
        return self._message

    @property
    def line(self):
        return self._line

    @property
    def column(self):
        return self._column


class QueryExecutionError(Exception):
    pass


class CorpusError(Exception):
    pass
