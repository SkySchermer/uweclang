#! /usr/bin/env python

# Python 3 forward compatability imports.
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

# Standard imports
import sys
import os
import io
import argparse

import uweclang

# We want to write all files in UTF-8 encoding. (This is a Python 3 forward
# compatability issue.)
reload(sys)
sys.setdefaultencoding('utf8')

# Script global variable for setting the extension for output files.
_OUTPUT_EXTENSION = ''


def tag_file(input_filename, output_dir, verbosity=1):
    """Batch processing function for tagging plaintext files.

    Arguments:
        input_filename (str): The input file.
        output_dir (str): The directory of the ouput files.
        verbosity (int): The verbosity of the output.

    Returns:
        (None)

    Raises:
        (None): Will kill the program on IOErrors.
    """
    # Get document text.
    try:
        with open(input_filename, 'r') as f:
            text = f.read()

    except IOError as e:
        print('Error openning file {}: {}'.format(input_filename, e))
        sys.exit(1)

    # Construct output filename.
    global _OUTPUT_EXTENSION
    memo_ext = ''
    if uweclang.split_ext(input_filename)[1].startswith('.memo'):
        memo_ext = '.memo'

    output_filename = os.path.join(output_dir,
                                   uweclang.split_ext(os.path.basename(input_filename))[0]
                                   + memo_ext + _OUTPUT_EXTENSION)

    # Open output file.
    try:
        out = io.open(output_filename, 'w', newline='\r\n')
    except IOError as e:
        print('Error creating file {}: {}'.format(output_filename, e))
        sys.exit(1)

    # Perform tagging.
    tagged_text = uweclang.tag(text)

    # Build text to write to file.
    output_text = []
    for sentence in tagged_text:
        for token, tag in sentence:
            output_text.append('{}/{} '.format(token, tag))
        output_text.append('\n')

    # Write text to file and close it.
    out.write(''.join(output_text))
    out.close()

    # Print task completion.
    if verbosity >= 1:
        print('Tagged {} -> "{}"'
              ''.format(os.path.basename(input_filename),
                        os.path.relpath(output_filename)))



if __name__ == '__main__':

    # Create a command line argument parser based on the BATCH_PARSER template.
    # See uweclang/batch/tools.py for details.
    parser = argparse.ArgumentParser(
        description='Tags plaintext files',
        parents=[uweclang.BATCH_PARSER])


    # Add extra command line arguments for this script.
    parser.add_argument('-x', '--o-extension',
                        nargs='?',
                        default='.tag.txt',
                        metavar='oext',
                        dest='oext',
                        help='extension for output file')


    # Parse command line arguments.
    args = parser.parse_args()

    # Set input extensions to get.
    args.extensions = args.extensions or ['.txt']

    # Set default verbosity.
    args.verbose = args.verbose or 1

    # Capture the output extensions into a global variable to that it is
    # visible to extract_plaintext_from_docx.
    _OUTPUT_EXTENSION = args.oext

    # Process the files.
    uweclang.batch_process(tag_file, **vars(args))


