#! /usr/bin/env python

# Python 3 forward compatability imports.
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

# Standard imports
import sys
import os
import argparse

import uweclang

# We want to write all files in UTF-8 encoding. (This ia a Python 3 forward
# compatability issue.)
reload(sys)
sys.setdefaultencoding('utf8')


# Script global variable for setting the extension for output files.
_OUTPUT_EXTENSION = ''


def extract_plaintext_from_docx(input_filename, output_dir, verbosity=1):
    """Batch processing function for extracting plaintext from Microsoft Word
    .docx files.

    Arguments:
        input_filename (str): The input file.
        output_dir (str): The directory of the ouput files.
        verbosity (int): The verbosity of the output.

    Returns:
        (None)

    Raises:
        (None): Will kill the program on IOErrors.
    """
    # Get document text.
    xml = uweclang.get_document_xml(input_filename, verbosity=verbosity)
    doc = uweclang.xml_to_plain(xml, verbosity=verbosity)

    # Construct output filename.
    global _OUTPUT_EXTENSION
    output_filename = os.path.join(output_dir,
                                   os.path.splitext(os.path.basename(input_filename))[0]
                                   + _OUTPUT_EXTENSION)

    # Open file for writing.
    try:
        out = open(output_filename, 'w')
    except IOError as e:
        print('Error creating file'
              ' {}: {}.'.format(os.path.basename(output_filename), e))
        sys.exit(1)


    # Write to file.
    try:
        out.write(doc.strip())
    except IOError as e:
        print('Error writing to file'
              ' {}: {}'.format(os.path.basename(output_filename), e))
        sys.exit(1)


    out.close()

    if verbosity >= 1:
        print('Extracted plaintext from '
              '{} into {}'.format(os.path.basename(input_filename),
                                  os.path.basename(output_filename)))


if __name__ == '__main__':

    # Create a command line argument parser based on the BATCH_PARSER template.
    # See uweclang/batch/tools.py for details.
    parser = argparse.ArgumentParser(
        description='Extracts plaintext from docx files',
        parents=[uweclang.BATCH_PARSER])


    # Add extra command line arguments for this script.
    parser.add_argument('-x', '--o-extension',
                        nargs='?',
                        default='.txt',
                        metavar='oext',
                        dest='oext',
                        help='extension for output file')


    # Parse command line arguments.
    args = parser.parse_args()

    # Set input extensions to get.
    args.extensions = args.extensions or ['.docx']

    # Set default verbosity.
    args.verbose = args.verbose or 1


    _OUTPUT_EXTENSION = args.oext

    # Setup extension checking function.
    def is_valid_target(file):
        return os.path.isfile(file) and os.path.splitext(file)[1] in args.ext


    # # Select the files to process.
    # (files, ignored_files) = uweclang.select_files(args,
    #                                                file_selector=is_valid_target)




    # Process the files.
    uweclang.batch_process(extract_plaintext_from_docx, **vars(args))




