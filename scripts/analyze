#! /usr/bin/env python

# Python 3 forward compatability imports.
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

# Standard imports
import sys
import os
import io
import re
import argparse

import uweclang
from itertools import chain

# We want to write all files in UTF-8 encoding. (This is a Python 3 forward
# compatability issue.)
reload(sys)
sys.setdefaultencoding('utf8')

# Script global variable for setting the extension for output files.
_OUTPUT_EXTENSION = ''

def analyze_text(text, file_name=None):
    """Takes a tagged text string and ouputs an string containing the analysis
    of the text.

    Arguments:
        text (str): The input tagged text.
        file_name (Optional[str]): The name of the text file. Defaults to None.

    Returns:
        (str): The analysis of the text.
    """
    lines = []

    # Add file header.
    if file_name is not None:
        lines.append('Text analysis for file "{}":'.format(os.path.basename(file_name)))
    else:
        lines.append('Text analysis:')
    lines.append('')

    tagged = uweclang.read_tagged_string(text)
    tokens = list(chain.from_iterable(tagged))

    # Count sentences, words, tokens.
    s_count = len(tagged)

    punctuation = r'``|\'\'|[^\w\s]'
    w_count = len([x for x in tokens if not re.match(punctuation, x[0])])

    t_count = len(tokens)

    lines.extend([
        '{:<25}{}'.format('Sentence Count:', s_count),
        '{:<25}{}'.format('Word Count:', w_count),
        '{:<25}{}'.format('Token Count:', t_count),
        '{:<25}{}'.format('Punctuation Token Count:', t_count - w_count),
        '{:<25}{:.4f}'.format('AVG Words/Sentence:', w_count / s_count),
        '{:<25}{:.4f}'.format('AVG Tokens/Sentence:', t_count / s_count),
        '{:<25}{:.4f}'.format('AVG Tokens/Word:', t_count / w_count),
        ''
    ])

    tag_lines = []
    for tag, data in uweclang.get_tags(tagged).iteritems():
        tag_lines.append('{:<12}{:<6} : {}'.format('Tag count:',
                                               tag,
                                               sum(data.values())))
    tag_lines.sort()
    lines.extend(tag_lines)
    lines.append('')

    return '\n'.join(lines)


def analyze_file(input_filename, output_dir, verbosity=1):
    """Batch processing function for analyzing tagged files.

    Arguments:
        input_filename (str): The input file.
        output_dir (str): The directory of the ouput files.
        verbosity (int): The verbosity of the output.

    Returns:
        (None)

    Raises:
        (None): Will kill the program on IOErrors.
    """
    # Get document text.
    try:
       with open(input_filename, 'r') as f:
           text = f.read()
    except IOError as e:
        print('Error openning file {}: {}'.format(input_filename, e))
        sys.exit(1)

    # Construct output filename.
    global _OUTPUT_EXTENSION
    ext = uweclang.split_ext(os.path.basename(input_filename))[1]
    memo_ext = '.memo' if ext.startswith('.memo') else ''
    output_filename = os.path.join(output_dir,
                                   uweclang.split_ext(os.path.basename(input_filename))[0]
                                   + memo_ext + _OUTPUT_EXTENSION)

    # Open output file.
    try:
        out = io.open(output_filename, 'w', newline='\r\n')
    except IOError as e:
        print('Error creating file {}: {}'.format(output_filename, e))
        sys.exit(1)

    # Perform analysis and write to file.
    out.write(analyze_text(text, input_filename))
    out.close()

    # Print task completion.
    if verbosity >= 1:
        print('Analyzed {} -> "{}"'
              ''.format(os.path.basename(input_filename),
                        os.path.relpath(output_filename)))



if __name__ == '__main__':

    # Create a command line argument parser based on the BATCH_PARSER template.
    # See uweclang/batch/tools.py for details.
    parser = argparse.ArgumentParser(
        description='Analyzes tagged files',
        parents=[uweclang.BATCH_PARSER])


    # Add extra command line arguments for this script.
    parser.add_argument('-x', '--o-extension',
                        nargs='?',
                        default='.res.txt',
                        metavar='oext',
                        dest='oext',
                        help='extension for output file')


    # Parse command line arguments.
    args = parser.parse_args()

    # Set input extensions to get.
    args.extensions = args.extensions or ['.tag.txt']

    # Set default verbosity.
    args.verbose = args.verbose or 1

    # Capture the output extensions into a global variable to that it is
    # visible to extract_plaintext_from_docx.
    _OUTPUT_EXTENSION = args.oext

    # Process the files.
    uweclang.batch_process(analyze_file, **vars(args))


