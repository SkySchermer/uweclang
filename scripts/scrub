#! /usr/bin/env python

# Python 3 forward compatability imports.
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

# Standard imports
import sys
import os
import io
import re
import argparse

import uweclang


# We want to write all files in UTF-8 encoding. (This is a Python 3 forward
# compatability issue.)
reload(sys)
sys.setdefaultencoding('utf8')

# Script global variables for setting the extension for output files.
_OUTPUT_EXTENSION = ''
_MEMO_OUTPUT_EXTENSION = ''
_LOG_OUTPUT_EXTENSION = ''

# Set the default capitalization and punctuation percent-per-word limits
_CAPS_LIMIT = 0.50
_PUNC_LIMIT = 0.30


def scrub_plaintext(input_filename, output_dir, verbosity=1):
    """Batch processing function for removing unwanted data from plaintext
    files.

    Arguments:
        input_filename (str): The input file.
        output_dir (str): The directory of the ouput files.
        verbosity (int): The verbosity of the output.

    Returns:
        (None)

    Raises:
        (None): Will kill the program on IOErrors.
    """
    # Construct output filenames.
    global _OUTPUT_EXTENSION, _MEMO_OUTPUT_EXTENSION, _LOG_OUTPUT_EXTENSION

    output_filename = os.path.join(output_dir,
                                   uweclang.split_ext(os.path.basename(input_filename))[0]
                                   + _OUTPUT_EXTENSION)
    memo_filename = os.path.join(output_dir,
                                 uweclang.split_ext(os.path.basename(input_filename))[0]
                                 + _MEMO_OUTPUT_EXTENSION)
    log_filename = os.path.join(output_dir,
                                uweclang.split_ext(os.path.basename(input_filename))[0]
                                + _LOG_OUTPUT_EXTENSION)


    # Get document text and split into lines.
    try:
        with open(input_filename, 'r') as f:
            lines = uweclang.line_split(f.read())

    except IOError as e:
        print('Error openning file {}: {}'.format(input_filename, e))
        sys.exit(1)

    # Open output file.
    try:
        out = io.open(output_filename, 'w', newline='\r\n')
    except IOError as e:
        print('Error creating file {}: {}'.format(output_filename, e))
        sys.exit(1)


    # Open log file.
    try:
        log = io.open(log_filename, 'w', newline='\r\n')
    except IOError as e:
        print('Error creating file {}: {}'.format(log_filename, e))
        sys.exit(1)


    # Process each line.
    found_memo = False
    result = []
    memo = []
    for line_number, line in enumerate(lines):

        # Remove empty lines.
        if re.match(r'\s*\Z', line):
            print('Line {}: REMOVE LINE (Empty Line, {} characters):'
                  '\n\t{}\n'.format(line_number, len(line), line),
                  file=log)
            continue

        # Remove number lines.
        if re.match(r'\d+\Z', line):
            print('Line {}: REMOVE LINE (Number Line, {} characters):'
                  '\n\t{}\n'.format(line_number, len(line), line),
                  file=log)
            continue

        global _CAPS_LIMIT, _PUNC_LIMIT
        punc = uweclang.punctuation_density(line)
        caps = uweclang.capitalization_density(line)

        # Remove citations
        if punc >= _PUNC_LIMIT:
            print('Line {}: REMOVE LINE (Line Punctuation = {:.3f}):'
                  '\n\t{}\n'.format(line_number, caps, line),
                  file=log)
            continue

        # Remove titles
        if caps >= _CAPS_LIMIT:
            if re.match('writer.*memo', line, flags=re.IGNORECASE):
                found_memo = True
                # Open memo file.
                try:
                    memo = io.open(memo_filename, 'w', newline='\r\n')
                except IOError as e:
                    print('Error creating file {}: {}'.format(memo_filename, e))
                    sys.exit(1)

            print('Line {}: REMOVE LINE (Line Capitalization = {:.3f}):'
                  '\n\t{}\n'.format(line_number, caps, line),
                  file=log)
            continue

        # Create inline citation detector:
        def citation_detector(parens, text):
            global _CAPS_LIMIT, _PUNC_LIMIT

            if parens != (None, None):

                # Edit out numbers
                if re.match(r'\d+\Z', text):
                    print('Line {}: EDIT OUT '
                          '(Page/Date Number, {} characters):'
                          '\n\t{}\n'.format(line_number, len(text), text),
                          file=log)
                    return False

                # Edit out short parentheticals containing numbers
                words = text.split()
                if len(words) < 10 and any([re.match(r'\d+', w) for w in words]):
                    print('Line {}: EDIT OUT '
                          '(Too Short with Number):'
                          '\n\t{}\n'.format(line_number, text),
                          file=log)
                    return False

                # Edit out if too much punctuation per word.
                punc = uweclang.punctuation_density(text)
                if punc >= _PUNC_LIMIT:
                    print('Line {}: EDIT OUT '
                          '(Parenthetical Punctuation = {:.3f}):'
                          '\n\t{}\n'.format(line_number, punc, text),
                          file=log)
                    return False

                # Edit out if too many capitalized words.
                caps = uweclang.capitalization_density(text)
                if caps >= _CAPS_LIMIT:
                    print('Line {}: EDIT OUT '
                          '(Parenthetical Capitalization = {:.3f}):'
                          '\n\t{}\n'.format(line_number, caps, text),
                          file=log)
                    return False

            return True

        # Remove inline citations:
        tree = uweclang.parse_parentheticals(line)
        line = uweclang.recombine_parentheticals(tree,
                                                 selector_function=citation_detector)

        # Remove extra spaces:
        line = uweclang.clean_punctuation(line)

        # Remove starting numbers from lines.
        m = re.match(r'(\d+)(.*)', line)
        if m:
            print('Line {}: EDIT OUT (Number Prefix, {} characters):'
                  '\n\t{}\n'.format(line_number, len(m.group(1)), m.group(1)),
                  file=log)
            line = re.group(2)

        if found_memo:
            print(line, file=memo)
        else:
            print(line, file=out)


    # Print task completion.
    if verbosity >= 1:
        print('Scrubbed {} -> "{}"'
              ''.format(os.path.basename(input_filename),
                        os.path.relpath(output_filename)))


if __name__ == '__main__':

    # Create a command line argument parser based on the BATCH_PARSER template.
    # See uweclang/batch/tools.py for details.
    parser = argparse.ArgumentParser(
        description='Cleans up errors in plaintext files',
        parents=[uweclang.BATCH_PARSER])


    # Add extra command line arguments for this script.
    parser.add_argument('-x', '--o-extension',
                        nargs='?',
                        default='.txt',
                        metavar='oext',
                        dest='oext',
                        help='extension for output file')

    parser.add_argument('--l-extension',
                        nargs='?',
                        default='.log',
                        metavar='lext',
                        dest='lext',
                        help='extension for output log file')

    parser.add_argument('--m-extension',
                        nargs='?',
                        default='.memo.txt',
                        metavar='mext',
                        dest='mext',
                        help='extension for output memo file')

    parser.add_argument('--caps-limit',
                        type=float,
                        default=_CAPS_LIMIT,
                        metavar='percent',
                        dest='caps',
                        help='capitalization percent for title removal')

    parser.add_argument('--punc-limit',
                        type=float,
                        default=_PUNC_LIMIT,
                        metavar='percent',
                        dest='punc',
                        help='punctuation percent for citation removal')


    # Setup extension checking function.
    def is_valid_target(file):
        return os.path.isfile(file) and os.path.splitext(file)[1] in args.ext

    # Parse command line arguments.
    args = parser.parse_args()

    # Set input extensions to get.
    args.extensions = args.extensions or ['.raw.txt']

    # Set default verbosity.
    args.verbose = args.verbose or 1

    # Capture the output extensions into global variables to that they are
    # visible to scrub_plaintext. Also save limit variables.
    _OUTPUT_EXTENSION = args.oext
    _MEMO_OUTPUT_EXTENSION = args.mext
    _LOG_OUTPUT_EXTENSION = args.lext
    _CAPS_LIMIT = args.caps
    _PUNC_LIMIT = args.punc

    # Process the files.
    uweclang.batch_process(scrub_plaintext, **vars(args))

