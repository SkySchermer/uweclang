#! /usr/bin/env python

# Python 3 forward compatability imports.
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

# Standard imports
import sys
import os
import io
import csv
import re
import argparse

import uweclang
import nltk

from nltk.corpus import TaggedCorpusReader
from collections import Counter
from pprint import pprint


# We want to write all files in UTF-8 encoding. (This is a Python 3 forward
# compatability issue.)
reload(sys)
sys.setdefaultencoding('utf8')

_COLLECTED_DATA = None
_COLLECTED_MEMO_DATA = None
_CSV_FILE = None

def collect_file(input_filename, output_dir, verbosity=1):
    """Batch processing function for collecting file data.

    Arguments:
        input_filename (str): The input file.
        output_dir (str): The directory of the ouput files.
        verbosity (int): The verbosity of the output.

    Returns:
        (None)

    Raises:
        (None): Will kill the program on IOErrors.
    """
    global _COLLECTED_DATA, _COLLECTED_MEMO_DATA, _CSV_FILE

    # Get analysis document text.
    try:
       with open(input_filename, 'r') as f:
           text = f.read().splitlines()
    except IOError as e:
        print('Error openning file {}: {}'.format(input_filename, e))
        sys.exit(1)


    # Prepare to read data from file.
    fmt_regex = re.compile(r'(\t)?(.*), ([^,]*), ([^,]*);')
    convert = {'int': int,
               'float': float,
               'str': (lambda x: x)}

    # Read analysis file into dictionary.
    data = {'File' : uweclang.split_ext(input_filename)[0]}
    last = None
    for line in text:
        match = fmt_regex.match(line)
        if match:
            # Strip groups
            m = (match.group(2).strip(),
                 match.group(3).strip(),
                 match.group(4).strip())

            if match.group(1) is None:
                if m[2] == 'Counter':
                    last = m[0]
                    data[last + ' (Total)'] = int(m[1])
                    data[last] = Counter()
                else:
                    data[m[0]] = convert[m[2]](m[1])
            else:
                data[last][m[0]] += convert[m[2]](m[1])


    # Load collected data into dictionary:
    if uweclang.split_ext(input_filename)[1].startswith('.memo'):
        summary = _COLLECTED_MEMO_DATA
    else:
        summary = _COLLECTED_DATA


    # Print task completion.
    if verbosity >= 1:
        print('Read data for {}.'.format(os.path.basename(input_filename)))


    # Initialize summary from first file if necessary.
    if summary is None:
        summary = data.copy()
        summary['Files'] = [summary.pop('File', None)]
    else:
        # Aggregate current file data into summary.
        summary['Files'].append(data['File'])
        for k, v in data.iteritems():
            if isinstance(v, str):
                continue
            elif isinstance(v, Counter):
                summary[k].update(v)
            elif isinstance(v, int) or isinstance(v, float):
                summary[k] += v

    # Write CSV Data
    csv_writer.writerow(uweclang.get_csv_data(data))

    # Save dictionary into collected data:
    if uweclang.split_ext(input_filename)[1].startswith('.memo'):
        _COLLECTED_MEMO_DATA = summary
    else:
        _COLLECTED_DATA = summary


if __name__ == '__main__':

    # Create a command line argument parser based on the BATCH_PARSER template.
    # See uweclang/batch/tools.py for details.
    parser = argparse.ArgumentParser(
        description='Summarizes result files',
        parents=[uweclang.BATCH_PARSER])

    # Add extra command line arguments for this script.
    parser.add_argument('-c', '--csv-extension',
                        nargs='?',
                        default='.csv',
                        metavar='cext',
                        dest='cext',
                        help='extension for output csv file')

    # Parse command line arguments.
    args = parser.parse_args()

    # Set input extensions for files to read.
    args.extensions = args.extensions or ['.res.txt']

    # Set default verbosity.
    args.verbose = args.verbose or 1


    # Open CSV file for writing.
    _CSV_FILE = open('summary.csv', 'wb')
    csv_writer = csv.DictWriter(_CSV_FILE,
                                fieldnames=uweclang.CSV_ANALYSIS_HEADER,
                                dialect='excel')
    csv_writer.writeheader()


    # Process the files.
    uweclang.batch_process(collect_file, **vars(args))
    summary = _COLLECTED_DATA


    # Correct averages for multiple files.
    for k, v in summary.iteritems():
        if isinstance(v, float):
            summary[k] /= len(summary['Files'])

    # Write CSV Data Sammary
    summary['File'] = 'Summary'
    csv_writer.writerow(uweclang.get_csv_data(summary))

    # Print short summary.
    if args.verbose >= 1:
        print('Summary of aggregated files: ')
        fmt = '{:25}{}'
        for k, v in summary.iteritems():
            if isinstance(v, list):
                print(fmt.format(k, len(v)))
            elif not isinstance(v, Counter):
                print(fmt.format(k, v))

    # Open output file.
    try:
        out = io.open(args.output_dir, 'w', newline='\r\n')
    except IOError as e:
        print('Error creating file {}: {}'.format(output_filename, e))
        sys.exit(1)

    # Write to output file.
    out.write(uweclang.analysis_to_str(summary))
    out.close()
    _CSV_FILE.close()
