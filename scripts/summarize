#! /usr/bin/env python

# Python 3 forward compatability imports.
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

# Standard imports
import sys
import os
import io
import re
import argparse

import uweclang
from collections import defaultdict
from pprint import pprint

# We want to write all files in UTF-8 encoding. (This is a Python 3 forward
# compatability issue.)
reload(sys)
sys.setdefaultencoding('utf8')

_COLLECTED_DATA = dict()
_COLLECTED_MEMO_DATA = dict()


def collect_file(input_filename, output_dir, verbosity=1):
    """Batch processing function for tagging plaintext files.

    Arguments:
        input_filename (str): The input file.
        output_dir (str): The directory of the ouput files.
        verbosity (int): The verbosity of the output.

    Returns:
        (None)

    Raises:
        (None): Will kill the program on IOErrors.
    """
    # Get document text.
    try:
       with open(input_filename, 'r') as f:
           text = f.read().splitlines()
    except IOError as e:
        print('Error openning file {}: {}'.format(input_filename, e))
        sys.exit(1)


    # Prepare to read data from text.
    fmt_regex = re.compile(r'([^,]*), (.{7}), ([^,]*), ([^,]*)')
    convert = {'int': int,
               'float': float,
               'str': (lambda x: x)}

    # Read text into dictionary.
    data = defaultdict(dict)
    for line in text:
        match = fmt_regex.match(line)
        if match:
            a = match.group(1).strip()
            b = match.group(2).strip()
            c = match.group(3).strip()
            d = match.group(4).strip()
            if b == '':
                data[a] = convert[d](c)
            else:
                data[a][b] = convert[d](c)

    # Save dictionary into collected data:
    if uweclang.split_ext(input_filename)[1].startswith('.memo'):
        _COLLECTED_MEMO_DATA[input_filename] = data
    else:
        _COLLECTED_DATA[input_filename] = data

    # Print task completion.
    if verbosity >= 1:
        print('Read data for {}.'.format(os.path.basename(input_filename)))



if __name__ == '__main__':

    # Create a command line argument parser based on the BATCH_PARSER template.
    # See uweclang/batch/tools.py for details.
    parser = argparse.ArgumentParser(
        description='Summarizes result files',
        parents=[uweclang.BATCH_PARSER])

    # Parse command line arguments.
    args = parser.parse_args()

    # Set input extensions for files to read.
    args.extensions = args.extensions or ['.res.txt']

    # Set default verbosity.
    args.verbose = args.verbose or 1

    # Process the files.
    uweclang.batch_process(collect_file, **vars(args))


    # Aggregate data.
    if args.verbose >= 1:
        print('Aggregating...')

    summary = defaultdict(int)
    summary['tags'] = defaultdict(int)
    for file_name, data in _COLLECTED_DATA.iteritems():
        summary['files_included'] += 1
        for key, value in data.iteritems():
            if isinstance(value, dict):
                for tag, count in value.iteritems():
                    summary['tags'][tag] += count
            elif isinstance(value, str):
                continue
            else:
                summary['total_' + key] += value

    # Compute averages.
    avgs = dict()
    avg_tags = dict()
    for key, value in summary.iteritems():
        if key.startswith('total_'):
            avgs['avg_'+key[6:]] = value / summary['files_included']
        elif key == 'tags':
            for tag, count in value.iteritems():
                avg_tags['avg_'+tag] = count / summary['files_included']

    # Added averages to summary.
    summary.update(avgs)
    summary['tags'].update(avg_tags)
    summary['tags'] = dict(summary['tags'])

    # Open output file.
    # try:
    #     out = io.open(args.output_dir, 'w', newline='\r\n')
    # except IOError as e:
    #     print('Error creating file {}: {}'.format(output_filename, e))
    #     sys.exit(1)

    # Write to output file.
    pprint(dict(summary))
    # out.close()
